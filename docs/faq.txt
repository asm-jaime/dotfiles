==================== intro

=== installation neovim
sudo add-apt-repository ppa:neovim-ppa/unstable
sudo apt-get update
sudo apt-get install neovim

=== modes
normal    # navigation/transformation: 'esc'
visual    # select a text: 'v','shift-v'
insert    # insert a text: 'i','a'
blockwise # edit a block text: 'ctrl-v'
command   # execute a command: ':', quit: ':q', write and quit: ':wq'

==================== intro

==================== console

==== package manager
apt-get install name              # install some package from internet
apt-get purge name                # remove only this package
apt-get purge --auto-remove name  # remove along with dependencies

=== environment
printenv                    # show env vars
export SOME_VAR=some_value  # set env var
unset SOME_VAR              # erase the existence of an env var
sudo nvim /etc/environment  # set permanent env vars

=== task manager/monitor/gnome-system-monitor
gnome-system-monitor
top

=== disk (/dev/sd*, /etc/fstab)
df -T                   # show disk info
blkid                   # show uuid disk
mount -all              # mount all disk emumed in /etc/fstab

=== process
killall -v nameprocess  # kill a process
sudo lsof -i :3476      # show name process what use port

=== find/grep/etc (file operations)
find . -name *.cpp | xargs sed -i 's/pat/rep/'  # replace in all files
grep -rnw '/path/' -e "what_search"             # search word in all files
grep --include=\*.{c,h} -rnw '/path/' -e "pat"  # include some files for search
grep --exclude-dir={dir1,dir2,*.dst} ...        # exlude array of dir

grep -Ril "text-to-find-here" / # i-ignore case, l-show the file, /-at the root

=== compile files
for D in *; do {echo '/*'; cat "$D/$D".ini; echo '*/'; cat "$D/$D".c;}
>> "$D/$D".cc; done

=== jobs in console
ctrl+z            # stopped job
fg                # resume job

=== change premissionr
r # read
w # write
x # execute or search

===
chmod 0755 -R /*    # 755 = -rwxr-xr-x
chmod u+x file.sh   # permissions to make it executable for yourself

=== display
xrandr -s 1280x960  #  changing screen-resolution

==================== console

==================== tmux section

# prefix - ctrl+b as default, begin to command mode tmux

=== tmux ssh/etc connection
ssh -p 2222 user@your-ip  # standart command for connection

=== restore all sessions
tmux new-session -d -s 0 '~/.tmux/plugins/tmux-resurrect/scripts/restore.sh'

=== attach/kill/etc session
tmux ls                   # show all sessions
tmux new -s myname        # start new with session name
tmux a -t myname          # attach to named
tmux kill-session -t name # kill session
ctrl + d                  # kill this window
prefix + c                # add new window
prefix + <window num>     # switch between windows 0 and 1
prefix + %                # vertical split
prefix + "                # horizontal split
prefix + z                # into full-screen

=== Windows (tabs)
:new<CR>          # new session
s                 # list sessions
$                 # name session

c                 # new window
,                 # name window
w                 # list windows

n                 # next window
p                 # previous window

f                 # find window
&                 # kill window
.                 # move window - prompted for a new number
:movew<CR>        # move window to the next unused number

=== Panes (splits)
%                 # horizontal split
                  # vertical split

o                 # swap panes
q                 # show pane numbers
x                 # kill pane
‚çΩ                 # space - toggle between layouts

=== Window/pane surgery
:joinp -s :2<CR>  # move window 2 into a new pane in the current window
:joinp -t :1<CR>  # move the current pane into a new pane in window 1

=== Reorder windows
d                 # detach
t                 # big clock
?                 # list shortcuts
:                 # prompt

=== vi function (to enter ctrl-b+[)
^            # Back to indentation
Escape       # Clear selection
Enter        # Copy selection
j            # Cursor down
h            # Cursor left
l            # Cursor right
L            # Cursor to bottom line
M            # Cursor to middle line
H            # Cursor to top line
k            # Cursor up
d            # Delete entire line
D            # Delete to end of line
$            # End of line
:            # Goto line
C-d          # Half page down
C-f          # Half page up
C-u          # Next page
w            # Next word
p            # Paste buffer
C-b          # Previous page
C-Down or J  # Scroll down
C-Up or K    # Scroll up
b            # Previous word
q            # Quit mode
n            # Search again
?            # Search backward
/            # Search forward
0            # Start of line
Space        # Start selection
C-t          # Transpose char

=== command
:source-file ~/.tmux.conf # reload config file

====================

==================== git

=== info project
git ls-files | xargs wc -l    # show number of lines in a git repository

=== info commits
git log                                     # show short 2st log commits
git log --graph --oneline --decorate --all  # show full log commits
git log -p -2                               # show full info about commts
git log --stat
git shortlog
git show
git status                                  # show status local repos
git describe

=== show commits as graph (one line command)
git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset)
- %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)
- %an%C(reset)%C(bold yellow)%d%C(reset)' --all

=== info diff
git difftool
git diff --staged
git diff master branchB

=== operation add
git add .                     # add changes for local repos
git add main.c

=== operation commit
git commit -a
git commit -a -m 'some note'
git commit -m 'explanation'   # commit changes for local repos

=== operation squash+rebase
git rebase -i HEAD~3          # joing commits (replace pick to squash, except 1st)

=== operation rebase branch
git checkout feature1         # need to be on working branch
git rebase master             # rebase it to master
git checkout master
git merge feature1            # do a fast-forward merge

=== operation remote
git remote -v                   # show status remote
git remote set-url origin       # set retome to origin/github/gitlab/etc..
git remote set-url origin git@github.com:user/repos.git
git remote set-url origin https://github.com:user/repos.git

=== operation branch
git branch
git branch -u
git branch -v # show status current branch

git branch -d local_branch
git push origin :remote_branch

git checkout master
git checkout somebranch
git checkout -b somebranch
git checkout somebranch --track

=== operation clone
git clone git@gitlab.com:user/some.git
git clone git@github.com:user/some.git

=== operation pull
git pull origin
git pull --recurse-submodules # pull all submodules

=== operation push
git push                      # push changes on remote (default github.com) repo
git fetch
git push origin HEAD:patch-1  # push to patch

=== operation remove
git rm
git rm --cached
git mv

=== operation reset
git reset
git reset foo.c                             # undo foo.c file
git reset --hard
git hard --reset                            # undo one commit

=== operation strong merge the last 12 commits
git reset --hard HEAD~12
git merge --squash HEAD@{1} # HEAD@{1} is where the branch was just before
git commit                  # commit those squashed changes
git push origin master      # after reset your push should be with certain path

=== operation merge
git merge somebranch
git merge somebranch --abort

git clean
git stash
git tag
git archive

=== oreration submodules
git submodule
git submodule add https://github.com/some.git
git submodule update --recursive

==================== git

==================== mongodb

db.coll.find().limit(1).sort({$natural:-1}).pretty()._id  # lastest elem
db.coll.find({"id": { "$lt" : ObjectId("")}}).count()     # position elem

==================== mongodb

==================== cgdb

=== code buffer
i               # puts to gdb buffer
I               # puts the user into TTY mode
t               # sets a temporary breakpoint at the current line number
F5              # send a run command to gdb
F6              # send a continue command to gdb
F7              # send a finish command to gdb
F8              # send a next command to gdb
F10             # send a step command to gdb
spacebar        # sets a breakpoint at the current line number

=== gdb buffer
alt+n           # switch to code buffer

=== all
ctrl+c          # end run

=== gdb
# compiling with flag -g (gcc -g main.c) required

help            # 'h breakpoints' lists help topics

=== breakpoints
break N         # 'b main/N/fn' puts bp at the n line
delete N        # del bp at the n line, 'd' short
clear           # 'clear function/N' delete all breakpoints in param

=== program
run             # runs the program until a breakpoint or error
continue        # 'cont' run the program until the next bp or error

step N          # 's N' runs the next line of the program
next            # 'n' like 's', but it does not step into functions
finish          # finishes executing the current function, then pause

function        # 'f' until the current function is finished
call myfunc()   # calls user-defined or system functions

u N             # runs until you get N lines in front
u               # goes up a level in the stack
d               # goes down a level in the stack

quit            # 'q' quits gdb
kill            # stop program exec

=== info
info break      # 'info watchpoints/threads/set' list info about
list myfunc     # 'l N/func/start#/filename:func' 10 lines of source code

=== print
print x         # 'p x' prints the current value of the variable

p *array-variable@length
p file-name::variable-name
x/b &var        # print as integer value in binary, p/t/x/c/d/u/o alse, 1 by/8bi

set x = 3       # set x to 3
watch x == 3    # sets a watch, which pauses the program when a condition changes

display x       # constantly displays the value of variable x
undisplay x     # removes the constant display of a variable

=== context
backtrace full  # 'bt' backtraces prints a stack trace
frame 1         # 'f number/ ' select/show frame where you alloc
up              # move to the next frame up in the function stack
down            # move to the next frame down in the function stack

handle [signalname] [action]  # instruct gdb to react a certain signal


==================== cgdb

==================== sessions

:mksession ~/.vim/sessions/session.vim    # make a session
:source ~/.vim/sessions/session.vim       # restore the session
vim -S ~/session.vim                      # restore the session from console

==================== sessions

==================== command mode

q:    # show command history

==================== command mode

==================== navigation

=== move
h                 # move one character left
j                 # move one row down
k                 # move one row up
l                 # move one character right
w                 # move to beginning of next word
b                 # move to previous beginning of word
e                 # move to end of word
W                 # move to beginning of next word after a whitespace
B                 # move to beginning of previous word before a whitespace
E                 # move to end of word before a whitespace

=== move within the line
0                 # move to beginning of line
$                 # move to end of line
^                 # move to first non-blank character in line
_                 # move to first non-blank character of the line
g_                # move to last non-blank character of the line

=== move within buffer
gg                # move to first line
G                 # move to last line
nG                # move to n'th line of file (n is a number; 12G moves to line 12)
H                 # move to top of screen
M                 # move to middle of screen
L                 # move to bottom of screen

=== scroll list
z.                # scroll the line with the cursor to the center of the screen
zt                # scroll the line with the cursor to the top
zb                # scroll the line with the cursor to the bottom

=== scroll line
ctrl-y            # scroll one line up
ctrl-e            # scroll one line down

=== scroll page
ctrl-D            # move half-page down
ctrl-U            # move half-page up
ctrl-B            # page up
ctrl-F            # page down

=== move match
n                 # next matching search pattern
N                 # previous matching search pattern
*                 # next whole word under cursor
#                 # previous whole word under cursor
g*                # next matching search (not whole word) pattern under cursor
g#                # previous matching search (not whole word) pattern under cursor
%                 # jump to matching bracket { } [ ] ( )

=== Jumping to characters
f<character>      # Jump forward and land on <character>
F<character>      # Jump forward and land right before <character>
t<character>      # til next <character> (similar to above)
T<character>      # til previous <character>

;                 # repeat above, in same direction
,                 # repeat above, in reverse direction

shift+{           # to start paragraph
shift+}           # to end paragraph

==================== navigation

==================== split windows buffers

ctrl-w up arrow   # move cursor up a window
ctrl-w ctrl-w     # move cursor to another window (cycle)
–°trl-w o          # expand window
ctrl-w c          # close window
ctrl-w s          # horisontal split
ctrl-w v          # vertical split
ctrl-w ]          # split and move
ctrl-w f          # split and open file-path on cursor
ctrl-w_           # maximize current window
ctrl-w=           # make all equal size
10 ctrl-w+        # increase window horisontal-size by 10 lines
10 ctrl-w>        # increase window vertical-size by 10 lines
ctrl-w ctrl-p     # move cursor prev window

ctrl-W K          # vertical to horisontal
ctrl-W H          # horisontal to vertical
ctrl-W r          # swap

:e filename       # edit another file (:e to reload/refresh the current file)
:split filename   # split window and load another file

:sb[uffer]        # split and edit buffer. Reopen split again clear it
:vsplit file      # vertical split
:sview file       # same as split, but readonly
:hide             # close current window
:only             # keep only this window open
:ls               # show current buffers
:b 2              # open buffer #2
:bufdo bd         # close all buffers in this window

==================== split windows buffers

==================== tabs

tab ball          # show each buffer in a tab (up to 'tabpagemax' tabs)
tab help          # open a new help window in its own tab page
tab drop {file}   # open {file} in a new tab, or jump to a window/tab containing it
tab split         # copy the current window to a new tab of its own

tabs              # list all tabs including their displayed windows
tabm 0            # move current tab to first
tabm              # move current tab to last
tabm {i}          # move current tab to position i+1

tabn              # go to next tab
tabp              # go to previous tab
tabfirst          # go to first tab
tablast           # go to last tab
tabnew            # make new tab

gt                # go to next tab
gT                # go to previous tab
{i}gt             # go to tab in position i
ctrl-PgDn         # go to next tab
ctrl-PgUp         # go to previous tab

:tabdo %s/foo/bar/g

==================== tabs

==================== cursor

``                # switch between the last and current position
''                # switch between the last string number and current string number
ctrl-o            # move back to previous position cursor
ctrl-i            # move next to previous position cursor
g;                # move back previous edit locations
g,                # move next previous edit locations

==================== cursor

==================== folding

zc                # fold block
zo                # open block
zM                # fold all block
zR                # open all block
za                # inersion
zf                # fold selected
zi                # disable folding

==================== folding

==================== buffers

.:                # the current buffer
w:                # buffers in other windows
b:                # other loaded buffers
u:                # unloaded buffers
t:                # tags
i:                # included files

==================== buffers

==================== operates on the block

ctrl-v            # blocks
shift-i           # insert something on multiple lines

==================== operates on the block

==================== transformations

=== edit
:10,20 normal $xx # remove last 2 char for 10-20 lines

=== upper/lower case
g~                # toggle case (HellO to hELLo)
gU                # upper case (HellO to HELLO)
gu                # lower case (HellO to hello)
guu               # current line to lower

=== retab/text tabs
:retab

=== operation: transform all tabs to 2 whitespace
:set shiftwidth=2
:e ++ff=dos       # convert the ^M linebreak
gg=G

==================== transformations

==================== vim-regexp

# more examples [http://vim.wikia.com/wiki/Search_and_replace]

:%s/foo/bar/g         # foo->bar in all the lines
:5,12s/foo/bar/g      # foo->bar for all lines from line 5 to line 12
:'<,'>s/foo/bar/g     # foo->bar for all lines within a visual selection
:.,$s/foo/bar/g       # foo->bar for all lines as current line (.) -> last line ($)
:'a,'bs/foo/bar/g     # foo->bar for all lines from mark a to mark b
:.,+2s/foo/bar/g      # foo->bar for the current line (.) and the 2 next lines
:g/^baz/s/foo/bar/g   # foo->bar in each line starting with 'baz'
:%s/_\(\w\)/\U\1/g    # foo_bar->fooBar, params with replace to uppercase
:%s/\s\+$//e          # remove unwanted spaces in end of line
:%s/foo\_.*bar//g     # select from foo to bar throught lines

==================== vim-regexp

==================== macros

:qa   # Start recording a macro named 'a'
:q    # Stop recording
:@a   # Play back the macro

==================== macros
